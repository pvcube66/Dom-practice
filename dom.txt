all the html we write is created and stored as the oject which is done by the html parser. 
we can literally see all the shit html we have written using the console.dir(document)
its all parent and child stuff along with properties , in the form of an object.

this stuff is done by html parser
it creates a tree like structure
hierarchy:
document->html->(head, body)->till the deepest levels

MORE DOM:
1. getelementbyid
2. getelementsbyclassname
3.getelementsbytagname
4. queryselector: you can literally pass anything class tag or even id. it will select on its own( more preffered) it will only give the first matched element
5. queryselectorall: same as above but will give all the matched elements in the form of node list can be used similar to array

innerText vs innerHtml vs innerTextContent:

innerText only selects the text , understands stuff, hides text which is hidden by css(display:none)

innerHtml gives full html , we can also add our own html and it can be rendered

innerTextContent it gives full text exactly as it is (extra spaces, /n etc ), doesnt hide the stuff which is hidden even by the css


getAttribute() vs setAttribute():

getAttribute() is a method used to get all the attributes of any element 
eg : document.querySelector('[names]').getAttribute('id')

setAttribute():
setAttribute() is a method used to set any attribute to any element , takes two arguments 
eg :  document.querySelector('[names]').setAttribute('id','vardhan');

not just that , we can directly access the common attributes without using these functions:
eg:document.querySelector('[names]').id='vishnu';

Styling the elements using js:
we can select the element and style the elements just like css in the js using 'style'
eg:document.querySelector('[names]').style.color='pink';

the above is one ugly way to style elements 
to optimise it we can use cssText just like normal css, but still its not very pleasing
what we can do is create a class in the css and link that class to all the elements . simple stuff
{ add this to the css file
    .domi{
    color:hotpink;
font-size:29px;
font-family:cursive;
font-weight:300;
text-decoration-line:none;

do this in the js:
element.className='domi';
}
}
when we want to add styles of different classes we use the classList


Element Vs Node:
element has all properties of node + some other properties


append vs appendChild:
1.appendChild:
used to add any element at the end of the selected element,
element.appendChild(another element)
we can also clone any element, that is by using the clone node function,it will return a clone of the selected node
// container.appendChild(h1.cloneNode(true))

the append() method doesnot return anything it returns undefined whereas the appendChild returns the appended element

in append() we can also add anything even the strings anything, eg element.append(' hi there ') will work whereas in the appendChild()
only appends the nodes ( to add strings we have to use the create text node method and add using the appepndchild)

1.append doesnot return anything                                                                                 1.appendChild returns the appended child
2.in append() we can also add anything even the strings anything, eg element.append(' hi there ')                2.in the appendChild()
only appends the nodes ( to add strings we have to use the create text node method and add using the appepndchild)

3.append() can add multiple elements at the same time        3. appendChild() only appends single element at a time, it will append only one element the other gets ignored


note: if we append without cloning then the element will be just cut paste, if we want that element in its place and a copy of it to be appendeda then we have to use the cloneNode() method
using append( )  and appendChild() we can only append the existing stuff, so we move to the createdElement( ) for adding new elements


createElement()::
it takes a single argument which is the element which we want  to create like the img, p,h1 etc 
not just only html elements but we can literally create anything, it takes any name as the argument and creates a object/element.
and using the append() method we can simply add this newly created element to the html


removeChild():
this method can only delete the childnode of any parent element, which means that the element to be removed must be a child
this method is used to permanently delete any element from the html file    

or 
remove() : method will also work.
select the element we want to remove: then simply element.remove( )